<?php
  namespace ADV\Core;

  /**
   * Generated by PHPUnit_SkeletonGenerator on 2012-06-12 at 21:03:00.
   */
  class NumTest extends \PHPUnit_Framework_TestCase {
    /** @var Num **/
    protected $object;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
      $this->object = new Num();
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }
    /**
     * @covers ADV\Core\Num::priceformat
     * @todo   Implement testpriceFormat().
     */
    public function testpriceFormat() {
      $actual   = $this->object->priceFormat('25.563434');
      $expected = ('25.56');
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->priceFormat('25');
      $expected = ('25.00');
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->priceFormat(0);
      $expected = '0.00';
      $this->assertSame($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::round
     * @todo   Implement testRound().
     */
    public function test_Round() {
      $actual   = $this->object->round('25.563434', 2);
      $expected = '25.56';
      $this->assertEquals($expected, $actual);

      $actual   = $this->object->round('25.56345', 4);
      $expected = '25.5635';
      $this->assertEquals($expected, $actual);

      $actual   = $this->object->round('25.565', 2);
      $expected = '25.57';
      $this->assertEquals($expected, $actual);

      $actual   = $this->object->round('25.575', 2);
      $expected = '25.58';
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers  ADV\Core\Num::format
     * @depends test_Round
     */
    public function test_Format() {
      $actual   = $this->object->format(25.56, 4);
      $expected = '25.5600';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->format(25.534534, 4);
      $expected = '25.5345';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->format(25, 2);
      $expected = '25.00';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->format('25.563434', 2);
      $expected = ('25.56');
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers  ADV\Core\Num::priceDecimal
     * @depends test_Format
     */
    public function test_priceDecimal() {
      $actual   = $this->object->priceDecimal(25.56, 4);
      $expected = '25.5600';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->priceDecimal(25.534534, 4);
      $expected = '25.534534';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->priceDecimal(25, 2);
      $expected = '25.00';
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::exrateFormat
     */
    public function test_exrateFormat() {
      $actual = $this->object->exrateFormat(25);
      $this->assertSame('25.0000', $actual);
      $actual = $this->object->exrateFormat('25');
      $this->assertSame('25.0000', $actual);
      $actual = $this->object->exrateFormat(25.555555);
      $this->assertSame('25.5556', $actual);
    }
    /**
     * @covers ADV\Core\Num::percentFormat
     */
    public function test_percentFormat() {
      // Remove the following lines when you implement this test.
      $actual = $this->object->percentFormat(25);
      $this->assertSame('25', $actual);
      $actual = $this->object->percentFormat('25');
      $this->assertSame('25', $actual);
      $actual = $this->object->percentFormat(25.5);
      $this->assertSame('26', $actual);
    }
    /**
     * @covers ADV\Core\Num::tonearestcents
     */
    public function test_toNearestCents() {
      $actual   = $this->object->toNearestCents(1111.125, 100);
      $expected = '1112';
      //$this->assertEquals($expected, $actual);
      $actual   = $this->object->toNearestCents(231.56, 10);
      $expected = '231.60';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->toNearestCents(231.1112, 1);
      $expected = '231.12';
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::towords
     * @todo   Implement testtoWords().
     */
    public function test_toWords() {
      // Remove the following lines when you implement this test.
      $actual   = $this->object->toWords(231);
      $expected = 'Two Hundred and Thirty-One';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->toWords(4249);
      $expected = 'Four Thousand Two Hundred and Fourty-Nine';
      $this->assertEquals($expected, $actual);
      $actual   = $this->object->toWords(4249.22);
      $expected = 'Four Thousand Two Hundred and Fourty-Nine';
      $this->assertEquals($expected, $actual);
    }
  }
