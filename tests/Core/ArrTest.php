<?php
  namespace ADV\Core;

  /**
   * Generated by PHPUnit_SkeletonGenerator on 2012-04-06 at 04:05:58.
   */
  class ArrTest extends \PHPUnit_Framework_TestCase {
    /** @var Arr **/
    protected $object;
    /**
     * @covers ADV\Core\Arr::insert
     * @return void
     */
    public function testInsert() {
      $part_numbers    = array('84256', '84257', '84258');
      $expected_result = array('84256', '84257', '86732', '84258');
      Arr::insert($part_numbers, 2, '86732');
      $this->assertEquals($expected_result, $part_numbers);
      $part_numbers    = array('one', 'two' => ['three' => 'test'], '84258');
      $expected_result = array('one', 'two' => ['three' => 'test', 'wawa' => ['four' => '86732']], '84258');
      Arr::insert($part_numbers, 'two.wawa.four', '86732');
      $this->assertEquals($expected_result, $part_numbers);
    }
    /**
     * @covers ADV\Core\Arr::remove
     * @todo   Implement testRemove().
     */
    public function testRemove() {
      $people   = array("Jack", "Jill");
      $expected = array("Jack");
      Arr::remove($people, 1);
      $this->assertEquals($expected, $people);
      $people = array("Humpty", "Jack", "Jill");
      Arr::remove($people, 1, 2);
      $expected = array("Humpty");
      $this->assertEquals($expected, $people);
    }
    /**
     * @covers ADV\Core\Arr::get
     * @todo   Implement testGet().
     */
    public function testGet() {
      $people = ["test1" => ['test3' => 'woot'], "Jack", "test2" => "Jill"];
      $ouput  = Arr::get($people, 'test2');
      $this->assertEquals("Jill", $ouput);
      $ouput = Arr::get($people, 'test2');
      $this->assertEquals("Jill", $ouput);
      $ouput = Arr::get($people, 'test3', "Humpty");
      $this->assertEquals("Humpty", $ouput);
      $ouput = Arr::get($people, 'test2.test3', "wrong");
      $this->assertEquals("wrong", $ouput);
      $ouput = Arr::get($people, 'test2.test3');
      $this->assertNull($ouput);
      $ouput = Arr::get($people, 'test1.test3', "wrong");
      $this->assertEquals("woot", $ouput);
    }
    /**
     * @covers ADV\Core\Arr::substitute
     * @todo   Implement testSubstitute().
     */
    public function testSubstitute() {
      $part_numbers    = array('84256', '84257', '84258');
      $expected_result = array('84256', '86732', '84258');
      \ADV\Core\Arr::substitute($part_numbers, 1, 1, '86732');
      $this->assertEquals($expected_result, $part_numbers);
      $part_numbers    = array('84256', '8422357', '84258', '842358');
      $expected_result = array('84256', '86732', '86732', '842358');
      \ADV\Core\Arr::substitute($part_numbers, 1, 2, '86732');
      $this->assertEquals($expected_result, $part_numbers);
      $part_numbers    = array('84256', '8623732', '86732', '22222', '333333', '4444', '842358');
      $expected_result = array('84256', '86732', '11111', '86732', '333333', '4444', '842358');
      \ADV\Core\Arr::substitute($part_numbers, 1, 3, ['86732', '11111']);
      $this->assertEquals($expected_result, $part_numbers);
    }
    /**
     * @covers ADV\Core\Arr::append
     * @todo   Implement testAppend().
     */
    public function testAppend() {
      // Remove the following lines when you implement this test.
      $initial   = ['one', 'two', 'three'];
      $to_append = ['four'];
      Arr::append($initial, $to_append);
      $this->assertInternalType('array', $initial);
      $initial   = ['one', 'two', 'three'];
      $to_append = ['four', 'five'];
      Arr::append($initial, $to_append);
      $expected = ['one', 'two', 'three', 'four', 'five'];
      $this->assertEquals($expected, $initial);
      $initial   = ['one', 'two', 'three'];
      $to_append = 'four';
      Arr::append($initial, $to_append);
      $expected = ['one', 'two', 'three', 'four'];
      $this->assertEquals($expected, $initial);
      $initial   = ['one' => 1, 'two' => 2, 'three' => 3];
      $to_append = ['four' => 4, 'five' => 5];
      $expected  = ['one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5];
      Arr::append($initial, $to_append);
      $this->assertEquals($expected, $initial);
    }
    /**
     * @covers ADV\Core\Arr::searchValue
     * @todo   Implement testsearchValue().
     */
    public function testsearchValue() {
      // Remove the following lines when you implement this test.
      $array  = [1 => 'one', 2 => 'two', 'three' => 3, 'four' => '4', 'five', 6 => array('six' => 6, 'seven' => 'seven')];
      $actual = Arr::searchValue(3, $array);
      $this->assertSame(3, $actual);
      $expected = $array[6];
      $actual   = Arr::searchValue(6, $array, 'six');
      $this->assertSame($expected, $actual);
    }
    /**
     * @covers ADV\Core\Arr::searchKey
     * @todo   Implement testsearchKey().
     */
    public function testsearchKey() {
      $array  = [1 => 'one', 2 => 'two', 'three' => 3, 'four' => '4', 'five', 6 => array('six' => 6, 'seven' => 'seven')];
      $actual = Arr::searchKey('five', $array);
      $this->assertSame(3, $actual);
      $actual = Arr::searchKey('4', $array);
      $this->assertSame('four', $actual);
    }
  }
