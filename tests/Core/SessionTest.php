<?php
  namespace ADV\Core;

  /**
   * Generated by PHPUnit_SkeletonGenerator on 2012-09-30 at 02:24:34.
   */
  class SessionTest extends \PHPUnit_Framework_TestCase {
    /** @var Session **/
    protected $object;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
      //$sessionhandler = $this->getMock('\\SessionHandlerInterface');
      $this->object = new Session();
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
      session_write_close();
      $this->object = null;
      $this->assertSame(PHP_SESSION_NONE, session_status());
    }
    /**
     * @covers ADV\Core\Session::__construct
     */
    public function testConstructed() {
      $this->assertSame(PHP_SESSION_ACTIVE, session_status());
      $this->assertAttributeEquals($_SESSION['_flash'], '_flash', $this->object);
    }
    /**
     * @covers ADV\Core\Session::checkUserAgent
     */
    public function testCheckUserAgent() {
      $actual = $this->object->checkUserAgent();
      $this->assertFalse($actual);
      session_write_close();
      session_start();
      $actual = $this->object->checkUserAgent();
      $this->assertTrue($actual);
    }
    /**
     * @covers ADV\Core\Session::__set
     * @todo   Implement test__set().
     */
    public function test__set() {
      $this->object->test = 'wawa';
      $this->assertArrayHasKey('test', $_SESSION);
      $this->assertSame('wawa', $_SESSION['test']);
    }
    /**
     * @covers ADV\Core\Session::__get
     * @todo   Implement test__get().
     */
    public function test__get() {
      $actual = $this->object->test;
      $this->assertSame('wawa', $actual);
    }
    /**
     * @covers ADV\Core\Session::set
     * @todo   Implement testSet().
     */
    public function testSet() {
      $this->object->set('test', 'wawa');
      $this->assertArrayHasKey('test', $_SESSION);
      $this->assertSame('wawa', $_SESSION['test']);
    }
    /**
     * @covers ADV\Core\Session::setGlobal
     * @todo   Implement testSetGlobal().
     */
    public function testSetGlobal() {
      $this->object->setGlobal('test', 'wawa');
      $this->assertArrayHasKey('_globals', $_SESSION);
      $this->assertArrayHasKey('test', $_SESSION['_globals']);
      $this->assertSame('wawa', $_SESSION['_globals']['test']);
    }
    /**
     * @covers ADV\Core\Session::setFlash
     */
    public function testSetFlash() {
      $this->object->setFlash('test', 'wawa');
      $this->assertArrayHasKey('_flash', $_SESSION);
      $this->assertArrayHasKey('test', $_SESSION['_flash']);
      $this->assertSame('wawa', $_SESSION['_flash']['test']);
      $this->assertArrayHasKey('_flash', $_SESSION);
    }
    /**
     * @covers    ADV\Core\Session::getFlash
     * @depends   testSetFlash
     */
    public function testGetFlash() {
      $this->assertSame(PHP_SESSION_ACTIVE, session_status());
      $actual = $this->object->getFlash('test');
      $this->assertSame('wawa', $actual);
    }
    /**
     * @covers    ADV\Core\Session::getFlash
     * @depends   testGetFlash
     */
    public function testFlashFlashes() {
      $this->assertEmpty($_SESSION['_flash']);
      $actual = $this->object->getFlash('test');
      $this->assertNull($actual);
    }
    /**
     * @covers  ADV\Core\Session::get
     * @depends testSet
     */
    public function testGet() {
      $actual = $this->object->get('test', 'default');
      $this->assertSame('wawa', $actual);
    }
    /**
     * @covers  ADV\Core\Session::getGlobal
     * @depends testSetGlobal
     */
    public function testGetGlobal() {
      $actual = $this->object->getGlobal('test');
      $this->assertSame('wawa', $actual);
    }
    /**
     * @covers ADV\Core\Session::removeGlobal
     * @todo   Implement testRemoveGlobal().
     */
    public function testRemoveGlobal() {
      $this->assertArrayHasKey('test', $_SESSION['_globals']);
      $this->object->removeGlobal('test');
      $this->assertArrayNotHasKey('test', $_SESSION['_globals']);
    }
    /**
     * @covers ADV\Core\Session::regenerate
     * @todo   Implement testRegenerate().
     */
    public function testRegenerate() {
      $before = session_id();
      $this->object->regenerate();
      $after = session_id();
      $this->assertNotSame($before, $after);
    }
    /**
     * @covers ADV\Core\Session::kill
     * @todo   Implement testKill().
     */
    public function testKill() {
      $_SESSION['stored'] = 'yesitis';
      $before             = session_id();
      $this->assertArrayHasKey('stored', $_SESSION);
      session_write_close();
      session_id($before);
      session_start();
      $this->assertSame(PHP_SESSION_ACTIVE, session_status());
      $this->assertArrayHasKey('stored', $_SESSION);
      $this->assertSame('yesitis', $_SESSION['stored']);
      $this->object->kill();
      session_write_close();
      $this->assertSame(PHP_SESSION_NONE, session_status());
      session_id($before);
      session_start();
      $this->assertSame(PHP_SESSION_ACTIVE, session_status());
      $this->assertArrayNotHasKey('stored', $_SESSION);
    }
    /**
     * @covers ADV\Core\Session::offsetExists
     * @todo   Implement testOffsetExists().
     */
    public function testOffsetExists() {
      $actual = isset($this->object['test']);
      $this->assertFalse($actual);
      $_SESSION['test'] = 'yes';
      $actual           = isset($this->object['test']);
      $this->assertTrue($actual);
    }
    /**
     * @covers ADV\Core\Session::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testOffsetGet() {
      $_SESSION['test'] = 'yes';
      $actual           = $this->object['test'];
      $this->assertSame('yes', $actual);
    }
    /**
     * @covers ADV\Core\Session::offsetSet
     * @todo   Implement testOffsetSet().
     */
    public function testOffsetSet() {
      $this->object['test'] = 'yes';
      $actual = $_SESSION['test'];
      $this->assertSame('yes', $actual);
    }
    /**
     * @covers ADV\Core\Session::offsetUnset
     * @todo   Implement testOffsetUnset().
     */
    public function testOffsetUnset() {
      $_SESSION['test'] = 'yes';
      $actual           = isset($this->object['test']);
      $this->assertTrue($actual);
      unset($this->object['test']);
      $actual = isset($this->object['test']);
      $this->assertFalse($actual);
      $actual = isset($_SESSION['test']);
      $this->assertFalse($actual);
    }
  }
